---
description:
globs:
alwaysApply: true
---
# UV Package Management Rule

This project uses **uv** as the primary package manager and task runner. All package-related operations and command execution must use uv commands.

## Core Principles

- **ALWAYS use uv** for package management operations
- **NEVER use pip, pip-tools, poetry, or other package managers**
- **ALWAYS use `uv run`** for executing Python scripts and commands
- Use uv's dependency groups for organizing dependencies

## Package Management Commands

### Installing Dependencies
```bash
# Install all dependencies (including dev dependencies)
uv sync

# Install only production dependencies
uv sync --no-dev

# Install from lock file (CI/CD)
uv sync --frozen
```

### Adding Dependencies
```bash
# Add production dependency
uv add package-name

# Add development dependency
uv add --group dev package-name

# Add with version constraint
uv add "package-name>=1.0.0"
```

### Removing Dependencies
```bash
# Remove production dependency
uv remove package-name

# Remove development dependency
uv remove --group dev package-name
```

### Updating Dependencies
```bash
# Update all dependencies
uv sync --upgrade

# Update specific package
uv add --upgrade package-name
```

## Command Execution

### Running Python Scripts
```bash
# Run the main application
uv run agile-mcp-server --project /path/to/project

# Run Python modules
uv run python -m pytest
uv run python -m mypy src/

# Run any Python script
uv run python script.py
```

### Development Tools
```bash
# Code formatting
uv run black src/ tests/
uv run ruff check src/ tests/
uv run ruff format src/ tests/

# Type checking
uv run mypy src/

# Testing
uv run pytest
uv run pytest --cov=src/

# Pre-commit hooks
uv run pre-commit run --all-files
```

### Build and Distribution
```bash
# Build the package
uv build

# Install in development mode
uv pip install -e .
```

## Project Configuration

The project uses [pyproject.toml](mdc:pyproject.toml) with:
- `[dependency-groups]` for organizing development dependencies
- Standard `[project]` section for production dependencies
- Build system using hatchling (compatible with uv)

## Dependency Groups

Development dependencies are organized in dependency groups:
```toml
[dependency-groups]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    # ... other dev dependencies
]
```

## Common Patterns

### CI/CD Integration
```bash
# In CI/CD pipelines
uv sync --frozen --no-dev  # Production install
uv sync --frozen           # Full install with dev dependencies
```

### Virtual Environment Management
uv automatically manages virtual environments - no need to manually create or activate them.

### Lock File Management
uv automatically maintains `uv.lock` for reproducible installations. Always commit this file.

## What NOT to Do

❌ **NEVER use these commands:**
```bash
pip install package-name
pip install -r requirements.txt
python -m pip install
poetry add package-name
pipenv install package-name
python script.py  # Use uv run python script.py instead
```

✅ **ALWAYS use these uv equivalents:**
```bash
uv add package-name
uv sync
uv run python script.py
```

## Integration with IDE

Configure your IDE to use uv's Python interpreter:
- uv automatically creates and manages virtual environments
- The Python interpreter will be in `.venv/bin/python` (Unix) or `.venv\Scripts\python.exe` (Windows)

## Performance Benefits

- **Faster dependency resolution** - uv is 10-100x faster than pip
- **Better caching** - Shared cache across projects
- **Reproducible builds** - Automatic lock file management
- **Simplified workflow** - Single tool for all package operations
